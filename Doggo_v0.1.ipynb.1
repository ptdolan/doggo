{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import pandas as pd\n",
    "from multiprocessing import Pool\n",
    "from statsmodels.stats.multitest import multipletests as mult  #MULTIPLE TESTING MODULE \n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "MaxReps=100000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#'''\n",
    "file=\"/Users/dolanpt/GitHub/doggo/msigdb.v7.1.symbols.gmt\"#CHANGE THIS TO YOUR LOCATION. RUN BLOCK ONCE (to make pickles) THEN COMMENT OUT. \n",
    "with open(file,'r') as inf:\n",
    "    alllines=[line.strip().split(\"\\t\") for line in inf]\n",
    "    DF=pd.concat([pd.DataFrame(zip([l[0]]*len(l[2:]),l[2:]),columns=[\"term\",\"genes\"]) for l in alllines])\n",
    "pd.to_pickle(DF,\"/Users/dolanpt/GitHub/doggo/msigdb.pkl\")#'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "MSigDB=pd.read_pickle(\"/Users/dolanpt/GitHub/doggo/msigdb.pkl\")#CHANGE TO YOUR LOCALE (MATCH ABOVE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target_id</th>\n",
       "      <th>ext_gene</th>\n",
       "      <th>pval</th>\n",
       "      <th>qval</th>\n",
       "      <th>b</th>\n",
       "      <th>se_b</th>\n",
       "      <th>mean_obs</th>\n",
       "      <th>var_obs</th>\n",
       "      <th>tech_var</th>\n",
       "      <th>sigma_sq</th>\n",
       "      <th>smooth_sigma_sq</th>\n",
       "      <th>final_sigma_sq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSMUSG00000074896</td>\n",
       "      <td>Ifit3</td>\n",
       "      <td>4.456777e-107</td>\n",
       "      <td>6.512243e-103</td>\n",
       "      <td>-3.404613</td>\n",
       "      <td>0.154895</td>\n",
       "      <td>6.826809</td>\n",
       "      <td>3.038144</td>\n",
       "      <td>0.003434</td>\n",
       "      <td>0.003701</td>\n",
       "      <td>0.020558</td>\n",
       "      <td>0.020558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSMUSG00000052776</td>\n",
       "      <td>Oas1a</td>\n",
       "      <td>1.357724e-76</td>\n",
       "      <td>9.919534e-73</td>\n",
       "      <td>-4.294433</td>\n",
       "      <td>0.231849</td>\n",
       "      <td>5.640401</td>\n",
       "      <td>5.197214</td>\n",
       "      <td>0.022023</td>\n",
       "      <td>-0.010895</td>\n",
       "      <td>0.031731</td>\n",
       "      <td>0.031731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSMUSG00000032690</td>\n",
       "      <td>Oas2</td>\n",
       "      <td>9.014040e-71</td>\n",
       "      <td>4.390438e-67</td>\n",
       "      <td>-2.888055</td>\n",
       "      <td>0.162375</td>\n",
       "      <td>6.691623</td>\n",
       "      <td>2.274026</td>\n",
       "      <td>0.005166</td>\n",
       "      <td>0.010855</td>\n",
       "      <td>0.021199</td>\n",
       "      <td>0.021199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSMUSG00000034459</td>\n",
       "      <td>Ifit1</td>\n",
       "      <td>5.656469e-69</td>\n",
       "      <td>2.066308e-65</td>\n",
       "      <td>-2.805423</td>\n",
       "      <td>0.159827</td>\n",
       "      <td>6.744662</td>\n",
       "      <td>2.009439</td>\n",
       "      <td>0.002210</td>\n",
       "      <td>0.023335</td>\n",
       "      <td>0.020932</td>\n",
       "      <td>0.023335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSMUSG00000111118</td>\n",
       "      <td>Gm6545</td>\n",
       "      <td>1.501913e-66</td>\n",
       "      <td>4.389191e-63</td>\n",
       "      <td>-3.114617</td>\n",
       "      <td>0.180736</td>\n",
       "      <td>6.051455</td>\n",
       "      <td>2.313076</td>\n",
       "      <td>0.006385</td>\n",
       "      <td>0.002788</td>\n",
       "      <td>0.026280</td>\n",
       "      <td>0.026280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>ENSMUSG00000047821</td>\n",
       "      <td>Trim16</td>\n",
       "      <td>2.536011e-03</td>\n",
       "      <td>9.650050e-02</td>\n",
       "      <td>1.051940</td>\n",
       "      <td>0.348439</td>\n",
       "      <td>4.175246</td>\n",
       "      <td>0.297952</td>\n",
       "      <td>0.042014</td>\n",
       "      <td>0.058805</td>\n",
       "      <td>0.079395</td>\n",
       "      <td>0.079395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>ENSMUSG00000031134</td>\n",
       "      <td>Rbmx</td>\n",
       "      <td>2.590271e-03</td>\n",
       "      <td>9.830920e-02</td>\n",
       "      <td>0.698363</td>\n",
       "      <td>0.231815</td>\n",
       "      <td>5.064383</td>\n",
       "      <td>0.119153</td>\n",
       "      <td>0.010121</td>\n",
       "      <td>0.017377</td>\n",
       "      <td>0.043617</td>\n",
       "      <td>0.043617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385</th>\n",
       "      <td>ENSMUSG00000082433</td>\n",
       "      <td>Gm9025</td>\n",
       "      <td>2.646293e-03</td>\n",
       "      <td>9.991637e-02</td>\n",
       "      <td>-3.948178</td>\n",
       "      <td>1.313392</td>\n",
       "      <td>2.364478</td>\n",
       "      <td>5.460115</td>\n",
       "      <td>0.569531</td>\n",
       "      <td>1.155468</td>\n",
       "      <td>0.366828</td>\n",
       "      <td>1.155468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386</th>\n",
       "      <td>ENSMUSG00000061969</td>\n",
       "      <td>Gm5581</td>\n",
       "      <td>2.643412e-03</td>\n",
       "      <td>9.991637e-02</td>\n",
       "      <td>-2.976849</td>\n",
       "      <td>0.990163</td>\n",
       "      <td>1.996560</td>\n",
       "      <td>2.367474</td>\n",
       "      <td>0.105328</td>\n",
       "      <td>0.875095</td>\n",
       "      <td>0.490915</td>\n",
       "      <td>0.875095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387</th>\n",
       "      <td>ENSMUSG00000018381</td>\n",
       "      <td>Abi3</td>\n",
       "      <td>2.654557e-03</td>\n",
       "      <td>9.997009e-02</td>\n",
       "      <td>-0.664855</td>\n",
       "      <td>0.221239</td>\n",
       "      <td>5.222238</td>\n",
       "      <td>0.129266</td>\n",
       "      <td>0.009183</td>\n",
       "      <td>0.013619</td>\n",
       "      <td>0.039764</td>\n",
       "      <td>0.039764</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>388 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              target_id ext_gene           pval           qval         b  \\\n",
       "0    ENSMUSG00000074896    Ifit3  4.456777e-107  6.512243e-103 -3.404613   \n",
       "1    ENSMUSG00000052776    Oas1a   1.357724e-76   9.919534e-73 -4.294433   \n",
       "2    ENSMUSG00000032690     Oas2   9.014040e-71   4.390438e-67 -2.888055   \n",
       "3    ENSMUSG00000034459    Ifit1   5.656469e-69   2.066308e-65 -2.805423   \n",
       "4    ENSMUSG00000111118   Gm6545   1.501913e-66   4.389191e-63 -3.114617   \n",
       "..                  ...      ...            ...            ...       ...   \n",
       "383  ENSMUSG00000047821   Trim16   2.536011e-03   9.650050e-02  1.051940   \n",
       "384  ENSMUSG00000031134     Rbmx   2.590271e-03   9.830920e-02  0.698363   \n",
       "385  ENSMUSG00000082433   Gm9025   2.646293e-03   9.991637e-02 -3.948178   \n",
       "386  ENSMUSG00000061969   Gm5581   2.643412e-03   9.991637e-02 -2.976849   \n",
       "387  ENSMUSG00000018381     Abi3   2.654557e-03   9.997009e-02 -0.664855   \n",
       "\n",
       "         se_b  mean_obs   var_obs  tech_var  sigma_sq  smooth_sigma_sq  \\\n",
       "0    0.154895  6.826809  3.038144  0.003434  0.003701         0.020558   \n",
       "1    0.231849  5.640401  5.197214  0.022023 -0.010895         0.031731   \n",
       "2    0.162375  6.691623  2.274026  0.005166  0.010855         0.021199   \n",
       "3    0.159827  6.744662  2.009439  0.002210  0.023335         0.020932   \n",
       "4    0.180736  6.051455  2.313076  0.006385  0.002788         0.026280   \n",
       "..        ...       ...       ...       ...       ...              ...   \n",
       "383  0.348439  4.175246  0.297952  0.042014  0.058805         0.079395   \n",
       "384  0.231815  5.064383  0.119153  0.010121  0.017377         0.043617   \n",
       "385  1.313392  2.364478  5.460115  0.569531  1.155468         0.366828   \n",
       "386  0.990163  1.996560  2.367474  0.105328  0.875095         0.490915   \n",
       "387  0.221239  5.222238  0.129266  0.009183  0.013619         0.039764   \n",
       "\n",
       "     final_sigma_sq  \n",
       "0          0.020558  \n",
       "1          0.031731  \n",
       "2          0.021199  \n",
       "3          0.023335  \n",
       "4          0.026280  \n",
       "..              ...  \n",
       "383        0.079395  \n",
       "384        0.043617  \n",
       "385        1.155468  \n",
       "386        0.875095  \n",
       "387        0.039764  \n",
       "\n",
       "[388 rows x 12 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#This inputData file should be a long table with genes as rows and the data (parameters for filtering and scoring (pval etc.)) for each as columns. \n",
    "inputData=\"/Users/dolanpt/GitHub/Sigal_Kallisto/Feb21-GFPN_AWT_IFNAR1_wt.tsv\"\n",
    "data=pd.read_table(inputData)\n",
    "dat\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def computeEnrichment(t,d):#term, database of terms\n",
    "    DBgenes=MSigDB.loc[MSigDB.term==t].genes\n",
    "    totalMean=d.b.values.mean()\n",
    "    targets=d([(d in DBgenes.values) for d in d.target.values])]\n",
    "    nrowS=targets.shape[0]\n",
    "    if nrowS>2:\n",
    "        print(t)\n",
    "        meanSelect=totalMean-targets.b.values.mean()\n",
    "        nrowT=d.shape[0]\n",
    "        positives=0\n",
    "        denom=0\n",
    "        if meanSelect < 0:#choose which tail to test...\n",
    "            while (positives<30)&(denom<MaxReps):\n",
    "                denom+=1\n",
    "                diffSample=totalMean-d.iloc[np.random.randint(0,nrowT,nrowS)].b.mean()\n",
    "                positives+=int(diffSample<meanSelect)\n",
    "        else:\n",
    "            while (positives<30)&(denom<MaxReps):\n",
    "                denom+=1                \n",
    "                diffSample=totalMean-d.iloc[np.random.randint(0,nrowT,nrowS)].b.mean()\n",
    "                positives+=int(diffSample>meanSelect)\n",
    "        #print(positives/denom)\n",
    "        #print((meanSelect-totalMean)/totalMean)\n",
    "    else:return(1.0)\n",
    "    return([positives/denom, ((meanSelect-totalMean)/totalMean)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "PREFIX=\"REACTOME_\"#DB to explore for enrichment (see the DB file for other formats \"GO_\", others...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the main block, and needs to be edited based on your data and the parameter (score column you will be sampling in your data.)\n",
    "def f(term):\n",
    "    DF=pd.DataFrame([term,computeEnrichmentPV(term,data,\"Max\")],index=[\"term\",\"pBS\"]).transpose() #A lot going on here. run the f() function defined above, take outputs and transpose for stacking in output DF\n",
    "    return(DF)\n",
    "if __name__ == '__main__':#Wrapped this f() function in a parallelization to speed up. Can tune pool size for computer. \n",
    "    with Pool(5) as p:\n",
    "        PVMax=pd.concat(p.map(f, [term for term in MSigDB.term.unique() if term.startswith(PREFIX)]))\n",
    "    PVMax['adjPbs']=mult(PVMax.pBS)[1]#\n",
    "    PVMax.to_csv(\"PVMax.csv\")#name output file approriately"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':#Wrapped this f() function in a parallelization to speed up. Can tune pool size for computer. \n",
    "    with Pool(5) as p:\n",
    "        PVMax=pd.concat(p.map(f, [term for term in MSigDB.term.unique() if term.startswith(PREFIX)]))\n",
    "    PVMax['adjPbs']=mult(PVMax.pBS)[1]#\n",
    "    PVMax.to_csv(\"PVMax.csv\")#name output file approriately"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(term):#max output based analysis CVB\n",
    "    DF=pd.DataFrame([term,computeEnrichmentCVB(term,data,\"Max\")],index=[\"term\",\"pBS\"]).transpose() \n",
    "    return(DF)\n",
    "if __name__ == '__main__':\n",
    "    with Pool(5) as p:\n",
    "        CVBMax=pd.concat(p.map(f, [term for term in MSigDB.term.unique() if term.startswith(PREFIX)]))\n",
    "    CVBMax['adjPbs']=mult(CVBMax.pBS)[1]#p adjustment\n",
    "    CVBMax.to_csv(\"CVBMax.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(term):#midpoint based analysis PV\n",
    "    DF=pd.DataFrame([term,computeEnrichmentPV(term,data,\"MP\")],index=[\"term\",\"pBS\"]).transpose() \n",
    "    return(DF)\n",
    "if __name__ == '__main__':\n",
    "    with Pool(5) as p:\n",
    "        PVMP=pd.concat(p.map(f, [term for term in MSigDB.term.unique() if term.startswith(PREFIX)]))\n",
    "    PVMP['adjPbs']=mult(PVMP.pBS)[1]\n",
    "    PVMP.to_csv(\"PVMP.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(term):#midpoint based analysis CVB\n",
    "    DF=pd.DataFrame([term,computeEnrichmentCVB(term,data,\"MP\")],index=[\"term\",\"pBS\"]).transpose() \n",
    "    return(DF)\n",
    "if __name__ == '__main__':\n",
    "    with Pool(5) as p:\n",
    "        CVBMP=pd.concat(p.map(f, [term for term in MSigDB.term.unique() if term.startswith(PREFIX)]))\n",
    "    CVBMP['adjPbs']=mult(CVBMP.pBS)[1]\n",
    "    CVBMP.to_csv(\"CVBMP.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
